/*
  DO NOT EDIT THIS FILE

  This file was created to simulate a database call.
*/

import assert from 'assert';

const data = {
  credentials: {
    user: 'user1',
    password: 'the password'
  },
  repositories: [
    { id: 100, name: 'react', owner: 'gaearon' },
    { id: 101, name: 'create-react-app', owner: 'gaearon' },
    { id: 102, name: 'enzyme', owner: 'gaearon' },
    { id: 103, name: 'Functional-Light-JS', owner: 'getify' },
    { id: 104, name: 'You-Dont-Know-JS', owner: 'getify' },
    { id: 105, name: 'fasy', owner: 'getify' },
    { id: 106, name: 'guide-to-graphql', owner: 'peggyrayzis' },
    { id: 107, name: 'apollo-client-devtools', owner: 'peggyrayzis' },
    { id: 108, name: 'apollo-client', owner: 'peggyrayzis' }
  ]
};

const timeout = () => Math.floor(Math.random() * (1000 - 100 + 1)) + 100;

export class DBClient {
  constructor(user: string, pass: string) {
    assert(user === data.credentials.user, 'Invalid username');
    assert(pass === data.credentials.password, 'Invalid password');
  }

  fetchRepos() {
    return new Promise(res => {
      setTimeout(() => {
        res(data.repositories);
      }, timeout());
    });
  }

  getRepoByName(repoName: string) {
    return new Promise(res => {
      setTimeout(() => {
        res(data.repositories.find(r => r.name === repoName));
      }, timeout());
    });
  }
}
